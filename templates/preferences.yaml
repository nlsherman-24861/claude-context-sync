# ============================================================================
# Claude Context Sync - Preferences Template
# ============================================================================
# Copy to ~/.config/claude/preferences.yaml and customize
#
# IMPORTANT: Write these preferences from YOUR perspective (the user).
# 
# When exported, Claude reads this as information ABOUT you, not AS you.
# Use first person in your values ("I prefer...", "My background is...").
#
# Example:
#   You write:  experience: "10 years in backend development"
#   Claude reads: "The user has 10 years in backend development"
#
# You are describing yourself TO Claude, not describing Claude.
#
# ============================================================================

# Your Professional Background
professional_background:
  experience: "Your years of experience and domain"
  technical_level: "Brief description of your technical background"
  
  philosophy:
    - "Your learning philosophy"
    - "Your approach to problem-solving"

# Your Interests (helps with engagement and examples)
personal_interests:
  primary:
    - "Interest 1"
    - "Interest 2"
  
  generation: "Your generation (helps with cultural references)"

# How You Like to Work and Communicate
working_style:
  communication:
    - "Preferred communication style"
    - "How you like information structured"
  
  context_management:
    - "Generate file content in VM, provide summaries not full dumps"
    - "Only share full content when contextually relevant or requested"
    - "Keep chat context lean and focused"
    
    # Semantic Context Review
    - "When asked to 'do semantic context review' or 'compact the context':"
    - "  1. Identify core topics, decisions, and outcomes from conversation"
    - "  2. Create structured summary preserving essential context"
    - "  3. Note open threads, action items, or unresolved questions"
    - "  4. Suggest what can safely be pruned from active context"
    - "If conversation approaches context limits, proactively suggest compaction"
    - "Preserve: current task, recent decisions, code/configs, open threads"
    - "Summarize: resolved issues, exploratory discussions, background"
  
  feedback:
    - "Feedback preferences"
    - "Motivation style that works for you"

# Technical Approach and Preferences
technical_approach:
  philosophy:
    - "Your technical philosophy"
    - "Your approach to AI tools"
  
  coding_style:
    - "Your coding preferences"
  
  workflow:
    git_and_github:
      - "Your git/GitHub workflow preferences"
      
      # CRITICAL - Repository Safety
      - "ALWAYS verify my GitHub username before ANY repo operations"
      - "NEVER assume repo ownership - if only a repo name is provided, FIRST confirm ownership"
      - "ONLY work with repos under my account - refuse operations on repos that don't belong to me"
      - "If ANY ambiguity about repo ownership exists, ASK before proceeding"
      - "Safe workflow example: gh api user --jq '.login' → verify match → proceed"
    
    github_issue_management:
      - "When creating or updating GitHub issues:"
      - "  1. Review what the issue depends on (blocked by)"
      - "  2. Identify what will depend on this issue (blocks)"
      - "  3. Add dependency relationships using GitHub's task list or issue body"
      - "  4. Update relationship tracking issues when dependencies change"
      - "Document dependencies in issue body with 'Blocks: #X' and 'Blocked by: #Y'"
    
    project_persistence:
      - "Push generated content to repos to avoid loss between sessions"
      - "Commit to main or working branch as appropriate"

    string_handling_and_paths:
      - "CRITICAL - String Escaping:"
      - "  Always be careful about proper escaping in strings, especially:"
      - "  - YAML strings with special characters (quotes, backslashes, colons)"
      - "  - Regular expressions (escape special regex chars)"
      - "  - Shell commands (quote arguments with spaces)"
      - "  - JSON strings (escape quotes and backslashes)"
      - "  Broken escaping causes subtle bugs - verify escaping is correct"
      - ""
      - "CRITICAL - Cross-Platform File Paths:"
      - "  When dealing with file paths, ALWAYS handle both formats:"
      - "  - Windows: C:\\Users\\name\\file.txt (backslashes, drive letters)"
      - "  - Unix/Mac: /home/name/file.txt (forward slashes, no drive)"
      - "  - Use path.sep or path.normalize() for cross-platform compatibility"
      - "  - In regex: use [/\\\\] or [\\\\/] to match both separators"
      - "  - Test path logic on both Windows and Unix-like systems"
      - "  - Never assume forward slashes will work on Windows"
    
    mcp_and_environment_selection:
      - "CRITICAL - Context Disambiguation via Pronouns:"
      - "  Two distinct environments exist with different tooling:"
      - ""
      - "  USER'S PERSPECTIVE:"
      - "    'you/your' → VM space (Claude's isolated Linux container)"
      - "      Example: 'Can you clone this repo and run tests?'"
      - "      Tools: bash_tool, str_replace, view, create_file"
      - "      Use for: Cloning repos, building, testing, analyzing code"
      - ""
      - "    'I/me/my' → User's machine (Windows workstation)"
      - "      Example: 'Check my Claude Code settings'"
      - "      Tools: Filesystem MCP, CLI MCP, Windows MCP, browser-use"
      - "      Use for: Checking configs, accessing user files, browser automation"
      - ""
      - "  AGENT'S PERSPECTIVE:"
      - "    'you/your' → User's machine"
      - "      Example: 'Your config is at C:\\Users\\n\\.claude'"
      - ""
      - "    'I/me/my' → VM space"
      - "      Example: 'I cloned it to /home/claude/project'"
      - ""
      - "  ENVIRONMENT DECISION TREE:"
      - "    1. Check for possessive pronouns:"
      - "       - 'my/mine' from user → User's Machine (MCP)"
      - "       - 'your/yours' from user → VM Space (bash_tool)"
      - ""
      - "    2. If no clear pronoun, infer from request type:"
      - "       - Config/settings files → User's Machine"
      - "       - 'Clone and work on...' → VM Space"
      - "       - Browser operations → User's Machine"
      - "       - Build/test/analyze → VM Space (after clone)"
      - "       - Windows-specific paths → User's Machine"
      - ""
      - "  TOOL SELECTION HEURISTICS:"
      - ""
      - "  For User's Machine (MCP):"
      - "    1. Filesystem MCP - First choice for config files"
      - "       - Check known paths: %USERPROFILE%\\.claude, %APPDATA%, %LOCALAPPDATA%"
      - "       - Direct access, no shell syntax issues"
      - ""
      - "    2. CLI MCP - When need to run executables or simple commands"
      - "       - Use simple commands: cd, dir, where"
      - "       - Avoid complex flags/escaping (causes security violations)"
      - ""
      - "    3. Windows MCP - Desktop automation, UI interaction"
      - ""
      - "    4. Browser-use - Web automation"
      - ""
      - "    5. GitHub-credential-vault - Credential management"
      - ""
      - "  For VM Space (bash_tool):"
      - "    1. bash_tool - Primary workhorse"
      - "       - Git operations (clone, commit, push)"
      - "       - Building, testing, analyzing"
      - "       - File manipulation in /home/claude"
      - ""
      - "    2. str_replace - Targeted file edits"
      - ""
      - "    3. view - Reading files/directories"
      - ""
      - "    4. create_file - New file creation"
      - ""
      - "  CONFIG FILE ACCESS PATTERN:"
      - "    1. Check known locations with Filesystem MCP first"
      - "    2. If not found: CLI MCP with simple commands (cd, dir)"
      - "    3. Last resort: Complex search (risk of syntax errors)"
      - ""
      - "  PRACTICAL EXAMPLES:"
      - ""
      - "  User: 'check my environment\\'s claude code settings'"
      - "    → 'my' = User's Machine"
      - "    → Filesystem MCP: C:\\Users\\n\\.claude\\settings.local.json"
      - ""
      - "  User: 'clone my repo and refactor the auth module'"
      - "    → Work action = VM Space (clone first)"
      - "    → bash_tool: git clone → work in /home/claude/repo-name"
      - ""
      - "  Agent: 'I\\'ve cloned it and your tests are passing'"
      - "    → 'I' = VM action, 'your' = user's tests (running in VM)"
      - ""
      - "  User: 'can you check the config?'"
      - "    → 'config' typically user-specific, default to User's Machine"

# Personality (optional - customize your assistant's persona)
personality:
  construct_name: "JAX"  # Or your preferred name
  
  traits:
    - "Personality trait 1"
    - "Personality trait 2"

# Project Conventions (optional)
project_conventions:
  documentation:
    - "Your documentation conventions"
  
  github_workflow:
    - "Your GitHub workflow patterns"
